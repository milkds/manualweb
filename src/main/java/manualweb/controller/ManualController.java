package manualweb.controller;


import manualweb.model.Manual;
import manualweb.model.PageInfoKeeper;
import manualweb.model.UserChoiceKeeper;
import manualweb.service.ManualService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


@Controller
public class ManualController {

    private ManualService manualService;

    @Autowired(required = true)
    @Qualifier (value = "manualService")
    public void setManualService(ManualService manualService) {
        this.manualService = manualService;
    }

    /**
     * loads initial page.
     * Without filters and at zero page.
     * @param model - Spring model
     **/
    @RequestMapping(value = "manuals", method = RequestMethod.GET)
    public String listManuals (Model model){
        /*getting information for showing on page*/
        PageInfoKeeper pageInfoKeeper = this.manualService.listManuals();

        /*adding attribute, containing list of manuals for showing, lists of values
        for filters, other information for page building.*/
        model.addAttribute("pageInfoKeeper", pageInfoKeeper);

        /*adding attribute to get user choices for filtration*/
        model.addAttribute("choiceKeeper", new UserChoiceKeeper());

        /*adding attribute for keeping user input values, for adding or
        editing manual*/
        model.addAttribute("manual", new Manual());

        return "manuals";
    }

    /**
     * loads page with manuals filtered by user's choice
     * @param model - Spring model
     * @param choiceKeeper - object, keeping user choices to filter manuals by them.
     */
    @RequestMapping("filter")
    public String filterManuals (Model model, @ModelAttribute ("choiceKeeper") UserChoiceKeeper choiceKeeper){
         /*getting information for showing on page*/
        PageInfoKeeper pageInfoKeeper = this.manualService.filterManuals(choiceKeeper);

        /*adding attribute, containing list of manuals for showing, lists of values
        for filters, other information for page building.*/
        model.addAttribute("pageInfoKeeper", pageInfoKeeper);

        /*adding attribute to get user choices for filtration*/
        model.addAttribute("choiceKeeper", choiceKeeper);

        /*adding attribute for keeping user input values, for adding or
        editing manual*/
        model.addAttribute("manual", new Manual());

        return "manuals";
    }

    /**
     * loads page with selected number
     * @param model - Spring model
     * @param pageNo - number of page to load
     */
    @RequestMapping("manuals/p={pageNo}")
    public String loadManualsFromPage (Model model, @PathVariable("pageNo") int pageNo) {
        /*getting information for showing on page*/
        PageInfoKeeper pageInfoKeeper = this.manualService.loadManualsFromPage(pageNo);

        /*adding attribute, containing list of manuals for showing, lists of values
        for filters, other information for page building.*/
        model.addAttribute("pageInfoKeeper", pageInfoKeeper);

        /*adding attribute to get user choices for filtration*/
        model.addAttribute("choiceKeeper", new UserChoiceKeeper());

        /*adding attribute for keeping user input values, for adding or
        editing manual*/
        model.addAttribute("manual", new Manual());

        return "/manuals";
    }

    /**
     * Adds new manual to database or updates existing manual.
     * @param manual - Object, keeping information entered by user to add new/edit
     *               existing manual to database.
     */
    @RequestMapping(value = "manuals/add", method = RequestMethod.POST)
    public String addManual (@ModelAttribute ("manual") Manual manual){
         /* Manuals' ID is generated by database - so if we get from JSP page manual
                with ID 0 - it means that manual is new and don't exist in database and
                we need to add it. Otherwise we understand that manual already exists in
                db and we need to update it.*/
        if (manual.getId()==0){
            this.manualService.addManual(manual);
        }
        else {
            this.manualService.updateManual(manual);
        }

        return "redirect:/manuals";
    }

    /**
     * Deleting manual from database
     * @param id - ID of manual to be deleted
     */
    @RequestMapping("/remove/{id}")
    public String removeManual(@PathVariable("id") int id){
        this.manualService.removeManual(id);
        return "redirect:/manuals";
    }

    /**
     * Prepares information to user for updating manual in database
     * @param id - ID of manual to be updated
     * @param model - Spring model
     */
    @RequestMapping("edit/{id}")
    public String editManual(@PathVariable("id") int id, Model model){
        /*adding attribute with filled fields to show user for editing*/
        model.addAttribute("manual", this.manualService.getManualById(id));

        /*adding attribute, containing list of manuals for showing, lists of values
        for filters, other information for page building.*/
        model.addAttribute("pageInfoKeeper", this.manualService.listManuals());

         /*adding attribute to get user choices for filtration*/
        model.addAttribute("choiceKeeper", new UserChoiceKeeper());

        return "manuals";
    }

    /**
     * Shows page with selected manual
     * @param id - ID of manual to be shown.
     * @param model - Spring model
     */
    @RequestMapping("manualdata/{id}")
    public String manualData(@PathVariable("id") int id, Model model){
        /* adding attribute with filled fields to show user*/
        model.addAttribute("manual", this.manualService.getManualById(id));

        return "manualdata";
    }


}
